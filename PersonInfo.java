/* Demo dataset for the hash table test */

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.fasterxml.jackson.annotation.JsonView;

@DynamoDBTable(tableName = "PersonInfo")
public class PersonInfo implements IDable<String> {

    @JsonView(value = {JsonViews.PersonInfo.class})
    private String id;
    @JsonView(value = {JsonViews.PersonInfo.class})
    private String firstName;
    @JsonView(value = {JsonViews.PersonInfo.class})
    private String lastName;

    @JsonView(value = {JsonViews.PersonInfo.class})
    private Role role;

    public enum Role { STUDENT, FACULTY, STAFF, ASSOCIATE }


    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }

    @DynamoDBAttribute
    public String getFirstName() {
        return firstName;
    }

    @DynamoDBAttribute
    public String getLastName() {
        return lastName;
    }

    @DynamoDBTypeConvertedEnum
    public Role getRole() {
        return role;
    }

    public void setId(String id) {
        this.id = id;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public void setRole(Role role) {
        this.role = role;
    }
    
    /**
     * Provides a hash code such that a new one appears totally random even 
     *   after the smallest change of the PersonInfo fields.
     * @return An integer hash code (positive)
     */
    @Override
    public int hashCode() {
    	String s = this.id+this.firstName+this.lastName+this.role.ordinal();
    	int hash = 0;
    	for (int i = 0; i < s.length(); i++) {
    		hash += s.charAt(i);
    		hash += (hash << 10);
    		hash ^= (hash >> 6);
    	}
    	hash += (hash << 3);
    	hash ^= (hash >> 11);
    	hash += (hash << 15);
    	return Math.abs(hash);
    }
    
    @Override
    public boolean equals(Object other) {
    	if (!(other instanceof PersonInfo)) return false;
    	PersonInfo p = (PersonInfo)other;
    	return this.id.equals(p.id) && this.firstName.equals(firstName)
    			&& this.lastName.equals(p.lastName) 
    			&& this.role.ordinal() == p.role.ordinal();    	
    }




    public static void main(String[] args) {

	HashTable<PersonInfo, String> table = new HashTable<>(1048576);
	PersonInfo p = null;
	for (int i = 0; i < 800000; i++) {
	  PersonInfo ps = new PersonInfo();
          ps.setRole(Role.values()[i % Role.values().length]);
	  ps.setFirstName("Joe");
	  ps.setLastName("B");
	  ps.setId(""+i);
	  table.put(ps, ""+i);
	  if (i == 500000) p = ps;
	} 

	System.out.println(table.get(p)));

    }

}
